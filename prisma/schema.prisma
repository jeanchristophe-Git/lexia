// Prisma Schema pour LexIA avec Auth + pgvector

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// ==== AUTHENTIFICATION NextAuth ====

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==== CONVERSATIONS ====

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String
  question    String
  answer      String
  confidence  Float    @default(0.0)
  sources     String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

// ==== DOCUMENTS JURIDIQUES avec pgvector ====

model LegalDocument {
  id              String                      @id
  title           String
  category        String
  contentPreview  String
  sourceUrl       String?
  embedding       Unsupported("vector(384)")? // Vecteur 384 dimensions
  scrapedAt       DateTime                    @default(now())
  createdAt       DateTime                    @default(now())

  @@index([category])
}
